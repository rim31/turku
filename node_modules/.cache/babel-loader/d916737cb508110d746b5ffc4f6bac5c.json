{"ast":null,"code":"var _jsxFileName = \"/Users/rims/Documents/musicuizz/frontend/src/components/screens/Covid.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport _ from 'lodash';\nconst headers = new Headers({\n  \"Accept\": \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0\"\n});\nexport default function Covid() {\n  const [covid, setCovid] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [labels, setLabels] = useState([]);\n  const [dataDiff, setDataDiff] = useState([]);\n\n  function countryDataGraph(data, country, caseType, dateTo) {\n    let resultCases = [];\n    let resultDates = [];\n\n    if (data.length > 0) {\n      data.forEach(item => {\n        if (moment(item.Date).isAfter(dateTo)) {\n          resultCases.push(item.Cases);\n          resultDates.push(moment(item.Date).format('YYYY/MM/DD'));\n        }\n      });\n\n      let resultCasesDiff = _.map(resultCases, function (e, i) {\n        return resultCases[i + 1] - e < 0 ? 0 : resultCases[i + 1] - e;\n      });\n\n      resultCasesDiff.pop();\n      resultCases.pop();\n      resultDates.pop();\n      setDataDiff(resultCasesDiff);\n      setData(resultCases);\n      setLabels(resultDates);\n      return {\n        resultCases,\n        resultDates,\n        resultCasesDiff\n      };\n    } else {\n      setData([]);\n      setLabels([]);\n      setDataDiff([]);\n    }\n  }\n\n  const getData = async () => {\n    try {\n      // const response = await fetch(\"https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.json\", {\n      const country = 'finland';\n      const caseType = 'confirmed';\n      const dateTo = `${moment().subtract(3, 'months').format()}`; // await fetch(`https://api.covid19api.com/country/${country}/status/${caseType}/live?from=${dateTo}&to=${moment().format('YYYY-MM-DDT00:00:00')}`)\n\n      await fetch(`https://api.covid19api.com/country/${country}/status/${caseType}/live?from=${dateTo}&to=${moment().format('YYYY-MM-DDT00:00:00')}`, {\n        method: 'GET',\n        redirect: 'follow',\n        headers: headers\n      }).then(response => response.json()).then(res => {\n        countryDataGraph(res, country, caseType, dateTo); // cleaning data for ChartJS\n      }).catch(err => alert(err));\n      console.log(\"getData \", covid, labels, dataDiff);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  useEffect(() => {\n    console.log(\"getData \", covid, labels, dataDiff);\n  }, [covid]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, covid && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"city\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"city-temp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Today\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, covid.label))));\n}","map":{"version":3,"sources":["/Users/rims/Documents/musicuizz/frontend/src/components/screens/Covid.tsx"],"names":["React","useState","useEffect","moment","_","headers","Headers","Covid","covid","setCovid","data","setData","labels","setLabels","dataDiff","setDataDiff","countryDataGraph","country","caseType","dateTo","resultCases","resultDates","length","forEach","item","Date","isAfter","push","Cases","format","resultCasesDiff","map","e","i","pop","getData","subtract","fetch","method","redirect","then","response","json","res","catch","err","alert","console","log","error","message","color","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport FetchCovidFinland from '../api/FetchCovidFinland';\nimport { createContainer } from \"unstated-next\";\nimport moment from 'moment';\nimport _ from 'lodash';\n\nconst headers = new Headers({\n  \"Accept\": \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0\"\n});\n\nexport default function Covid() {\n  const [covid, setCovid] = useState<any>(\"\")\n  const [data, setData] = useState<any>([])\n  const [labels, setLabels] = useState<any>([])\n  const [dataDiff, setDataDiff] = useState<any>([])\n\n\n  function countryDataGraph(data: any, country: string, caseType: string, dateTo: string) {\n    let resultCases: any[] = []\n    let resultDates: any[] = []\n    if (data.length > 0) {\n      data.forEach((item: any) => {\n        if ((moment(item.Date).isAfter(dateTo))) {\n          resultCases.push(item.Cases);\n          resultDates.push(moment(item.Date).format('YYYY/MM/DD'));\n        }\n      })\n      let resultCasesDiff: any[] = _.map(resultCases, function (e: any, i: any) {\n        return (resultCases[i + 1] - e) < 0 ? 0 : (resultCases[i + 1] - e)\n      });\n      resultCasesDiff.pop();\n      resultCases.pop();\n      resultDates.pop();\n      setDataDiff(resultCasesDiff);\n      setData(resultCases);\n      setLabels(resultDates);\n      return ({ resultCases, resultDates, resultCasesDiff });\n    } else {\n      setData([]);\n      setLabels([]);\n      setDataDiff([]);\n    }\n  }\n\n  const getData = async () => {\n    try {\n      // const response = await fetch(\"https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.json\", {\n      const country: string = 'finland';\n      const caseType: string = 'confirmed';\n      const dateTo: string = `${moment().subtract(3, 'months').format()}`\n      // await fetch(`https://api.covid19api.com/country/${country}/status/${caseType}/live?from=${dateTo}&to=${moment().format('YYYY-MM-DDT00:00:00')}`)\n      await fetch(`https://api.covid19api.com/country/${country}/status/${caseType}/live?from=${dateTo}&to=${moment().format('YYYY-MM-DDT00:00:00')}`, {\n        method: 'GET',\n        redirect: 'follow',\n        headers: headers\n      })\n        .then((response: any) => response.json()).then((res) => {\n          countryDataGraph(res, country, caseType, dateTo);// cleaning data for ChartJS\n        }).catch(err => alert(err));\n      console.log(\"getData \", covid, labels, dataDiff);\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n\n  useEffect(() => {\n    getData();\n  }, [])\n\n  useEffect(() => {\n    console.log(\"getData \", covid, labels, dataDiff);\n  }, [covid])\n\n  return (\n    <div className=\"main-container\">\n      {\n        covid && (\n          <div className=\"city\">\n            <div className=\"city-temp\">\n              Today\n            </div>\n            <div className=\"info\">\n              <p style={{ color: \"black\" }}>{covid.label}</p>\n            </div>\n          </div>\n        )\n      }\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}