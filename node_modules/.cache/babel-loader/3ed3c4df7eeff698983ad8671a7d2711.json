{"ast":null,"code":"// eslint-disable-next-line\nimport { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport { createContainer } from \"unstated-next\";\nimport axios from 'axios';\nimport { readRemoteFile } from 'react-papaparse'; // const URL_PAGE = `https://api.turku.fi/linkedevents/v1/image/?page=`;\n// source : \"https://api.covid19api.com/\"\n\nexport const useStore = () => {\n  const [data, setData] = useState([]); // data for graph\n\n  const [dataDiff, setDataDiff] = useState([]); // data diff for graph\n\n  const [labels, setLabels] = useState([]);\n  const [eventUrl, setEventUrl] = useState(\"https://api.turku.fi/linkedevents/v1/event/?page=1\");\n  const [events, setEvents] = useState([]);\n  const [listNames, setListNames] = useState([]);\n  const [listNamesYears, setListNamesYears] = useState([]);\n  const [listNamesLocation, setListNamesLocation] = useState([]);\n  const [listNamesFamily, setListNamesFamily] = useState([]);\n  const [nextEvents, setNextEvents] = useState(\"\");\n  const [previousEvents, setPreviousEvents] = useState(\"\");\n  const headers = new Headers({\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0\"\n  });\n\n  const fetchEventsUrl = async url => {\n    const response = await axios.get(url ? url : eventUrl);\n    setEvents(response.data.data);\n    if (response.data.meta.next) setNextEvents(response.data.meta.next);\n    if (response.data.meta.previous) setPreviousEvents(response.data.meta.previous);\n    console.log(\"Response events unstated\", response.data);\n    return response.data;\n  };\n\n  function countryDataGraph(data, country, caseType, dateTo) {\n    let resultCases = [];\n    let resultDates = [];\n\n    if (data.length > 0) {\n      data.forEach(item => {\n        if (moment(item.Date).isAfter(dateTo)) {\n          resultCases.push(item.Cases);\n          resultDates.push(moment(item.Date).format('YYYY/MM/DD'));\n        }\n      });\n\n      let resultCasesDiff = _.map(resultCases, function (e, i) {\n        return resultCases[i + 1] - e < 0 ? 0 : resultCases[i + 1] - e;\n      });\n\n      resultCasesDiff.pop();\n      resultCases.pop();\n      resultDates.pop();\n      setDataDiff(resultCasesDiff);\n      setData(resultCases);\n      setLabels(resultDates);\n    }\n  } // const response = await fetch(\"https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.json\", {\n\n\n  const getDataCovid = async () => {\n    try {\n      const country = 'finland';\n      const caseType = 'confirmed';\n      const dateTo = `${moment().subtract(3, 'months').format()}`;\n      await fetch(`https://api.covid19api.com/country/${country}/status/${caseType}/live?from=${dateTo}&to=${moment().format('YYYY-MM-DDT00:00:00')}`, {\n        method: 'GET',\n        redirect: 'follow',\n        headers: headers\n      }).then(response => response.json()).then(res => {\n        countryDataGraph(res, country, caseType, dateTo); // cleaning data for ChartJS\n      }).catch(err => alert(err));\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  {\n    /**  function get Remote .csv, can use url or file location\n    */\n  }\n\n  const getCsv = csvFile => {\n    readRemoteFile(csvFile, {\n      complete: results => {\n        console.log;\n        if (results) return results;\n        return [];\n      }\n    });\n  };\n\n  useEffect(() => {\n    setListNames(getCsv('/images/first_name.csv'));\n    setListNamesYears(getCsv('/images/year_name.csv'));\n    setListNamesFamily(getCsv('/images/family_name.csv'));\n    setListNamesLocation(getCsv('/images/location_name.csv'));\n  }, []);\n  return {\n    data,\n    dataDiff,\n    labels,\n    headers,\n    events,\n    nextEvents,\n    previousEvents,\n    listNames,\n    listNamesYears,\n    listNamesLocation,\n    listNamesFamily,\n    getDataCovid,\n    fetchEventsUrl,\n    setEventUrl,\n    setNextEvents,\n    setPreviousEvents,\n    getCsv\n  };\n};\nexport const StoreContainer = createContainer(useStore);","map":{"version":3,"sources":["/Users/rims/Documents/musicuizz/frontend/src/components/Store.tsx"],"names":["useState","useEffect","moment","_","createContainer","axios","readRemoteFile","useStore","data","setData","dataDiff","setDataDiff","labels","setLabels","eventUrl","setEventUrl","events","setEvents","listNames","setListNames","listNamesYears","setListNamesYears","listNamesLocation","setListNamesLocation","listNamesFamily","setListNamesFamily","nextEvents","setNextEvents","previousEvents","setPreviousEvents","headers","Headers","fetchEventsUrl","url","response","get","meta","next","previous","console","log","countryDataGraph","country","caseType","dateTo","resultCases","resultDates","length","forEach","item","Date","isAfter","push","Cases","format","resultCasesDiff","map","e","i","pop","getDataCovid","subtract","fetch","method","redirect","then","json","res","catch","err","alert","error","message","getCsv","csvFile","complete","results","StoreContainer"],"mappings":"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","sourcesContent":["// eslint-disable-next-line\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport { createContainer } from \"unstated-next\";\nimport axios from 'axios';\nimport { readRemoteFile } from 'react-papaparse'\n\n// const URL_PAGE = `https://api.turku.fi/linkedevents/v1/image/?page=`;\n// source : \"https://api.covid19api.com/\"\n\nexport const useStore = () => {\n  const [data, setData] = useState<Object[] | void | null | undefined>([]);// data for graph\n  const [dataDiff, setDataDiff] = useState<number[] | any[] | undefined>([]);// data diff for graph\n  const [labels, setLabels] = useState<Object[] | void | null | undefined>([]);\n  const [eventUrl, setEventUrl] = useState<string>(\"https://api.turku.fi/linkedevents/v1/event/?page=1\");\n  const [events, setEvents] = useState<any[]>([]);\n  const [listNames, setListNames] = useState<any>([]);\n  const [listNamesYears, setListNamesYears] = useState<any>([]);\n  const [listNamesLocation, setListNamesLocation] = useState<any>([]);\n  const [listNamesFamily, setListNamesFamily] = useState<any>([]);\n  const [nextEvents, setNextEvents] = useState<string>(\"\");\n  const [previousEvents, setPreviousEvents] = useState<string>(\"\");\n\n  const headers = new Headers({\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0\"\n  });\n\n  const fetchEventsUrl = async (url: any) => {\n    const response: any = await axios.get(url ? url : eventUrl);\n    setEvents(response.data.data);\n    if (response.data.meta.next)\n      setNextEvents(response.data.meta.next);\n    if (response.data.meta.previous)\n      setPreviousEvents(response.data.meta.previous);\n    console.log(\"Response events unstated\", response.data);\n    return response.data;\n  }\n\n  function countryDataGraph(data: any, country: string, caseType: string, dateTo: string) {\n    let resultCases: any[] = []\n    let resultDates: any[] = []\n    if (data.length > 0) {\n      data.forEach((item: any) => {\n        if ((moment(item.Date).isAfter(dateTo))) {\n          resultCases.push(item.Cases);\n          resultDates.push(moment(item.Date).format('YYYY/MM/DD'));\n        }\n      })\n      let resultCasesDiff: any[] = _.map(resultCases, function (e: any, i: any) {\n        return (resultCases[i + 1] - e) < 0 ? 0 : (resultCases[i + 1] - e)\n      });\n      resultCasesDiff.pop();\n      resultCases.pop();\n      resultDates.pop();\n      setDataDiff(resultCasesDiff);\n      setData(resultCases);\n      setLabels(resultDates);\n    }\n  }\n\n  // const response = await fetch(\"https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.json\", {\n  const getDataCovid = async () => {\n    try {\n      const country: string = 'finland';\n      const caseType: string = 'confirmed';\n      const dateTo: string = `${moment().subtract(3, 'months').format()}`\n      await fetch(`https://api.covid19api.com/country/${country}/status/${caseType}/live?from=${dateTo}&to=${moment().format('YYYY-MM-DDT00:00:00')}`, {\n        method: 'GET',\n        redirect: 'follow',\n        headers: headers\n      })\n        .then((response: any) => response.json()).then((res) => {\n          countryDataGraph(res, country, caseType, dateTo);// cleaning data for ChartJS\n        }).catch(err => alert(err));\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n\n  {/**  function get Remote .csv, can use url or file location\n   */}\n  const getCsv = (csvFile: string) => {\n    readRemoteFile(csvFile, {\n      complete: (results: any) => {\n        console.log\n        if (results)\n          return results\n        return [];\n      }\n    })\n  }\n  useEffect(() => {\n    setListNames(getCsv('/images/first_name.csv'))\n    setListNamesYears(getCsv('/images/year_name.csv'))\n    setListNamesFamily(getCsv('/images/family_name.csv'))\n    setListNamesLocation(getCsv('/images/location_name.csv'))\n  }, [])\n\n  return {\n    data,\n    dataDiff,\n    labels,\n    headers,\n    events,\n    nextEvents,\n    previousEvents,\n    listNames,\n    listNamesYears,\n    listNamesLocation,\n    listNamesFamily,\n    getDataCovid,\n    fetchEventsUrl,\n    setEventUrl,\n    setNextEvents,\n    setPreviousEvents,\n    getCsv,\n  };\n}\nexport const StoreContainer = createContainer(useStore)\n"]},"metadata":{},"sourceType":"module"}