{"ast":null,"code":"// eslint-disable-next-line\nimport * as React from 'react';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport { createContainer } from \"unstated-next\"; // source : \"https://api.covid19api.com/\"\n// source : \"https://covidtracking.com/api/us/daily\"\n\nexport const useStore = () => {\n  const [data, setData] = React.useState([]); // data for graph\n\n  const [dataDiff, setDataDiff] = React.useState([]); // data diff for graph\n\n  const [labels, setLabels] = React.useState([]);\n  const headers = new Headers({\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0\"\n  });\n\n  function countryDataGraph(data, country, caseType, dateTo) {\n    let resultCases = [];\n    let resultDates = [];\n\n    if (data.length > 0) {\n      data.forEach(item => {\n        if (moment(item.Date).isAfter(dateTo)) {\n          resultCases.push(item.Cases);\n          resultDates.push(moment(item.Date).format('YYYY/MM/DD'));\n        }\n      });\n\n      let resultCasesDiff = _.map(resultCases, function (e, i) {\n        return resultCases[i + 1] - e < 0 ? 0 : resultCases[i + 1] - e;\n      });\n\n      resultCasesDiff.pop();\n      resultCases.pop();\n      resultDates.pop();\n      setDataDiff(resultCasesDiff);\n      setData(resultCases);\n      setLabels(resultDates);\n    }\n  } // const response = await fetch(\"https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.json\", {\n\n\n  const getDataCovid = async () => {\n    try {\n      const country = 'finland';\n      const caseType = 'confirmed';\n      const dateTo = `${moment().subtract(3, 'months').format()}`;\n      await fetch(`https://api.covid19api.com/country/${country}/status/${caseType}/live?from=${dateTo}&to=${moment().format('YYYY-MM-DDT00:00:00')}`, {\n        method: 'GET',\n        redirect: 'follow',\n        headers: headers\n      }).then(response => response.json()).then(res => {\n        countryDataGraph(res, country, caseType, dateTo); // cleaning data for ChartJS\n      }).catch(err => alert(err));\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  return {\n    data,\n    dataDiff,\n    labels,\n    headers,\n    getDataCovid\n  };\n};\nexport const StoreContainer = createContainer(useStore);","map":{"version":3,"sources":["/Users/rims/Documents/musicuizz/frontend/src/components/Store.tsx"],"names":["React","moment","_","createContainer","useStore","data","setData","useState","dataDiff","setDataDiff","labels","setLabels","headers","Headers","countryDataGraph","country","caseType","dateTo","resultCases","resultDates","length","forEach","item","Date","isAfter","push","Cases","format","resultCasesDiff","map","e","i","pop","getDataCovid","subtract","fetch","method","redirect","then","response","json","res","catch","err","alert","console","error","message","StoreContainer"],"mappings":"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","sourcesContent":["// eslint-disable-next-line\nimport * as React from 'react';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport { createContainer } from \"unstated-next\";\n\n// source : \"https://api.covid19api.com/\"\n// source : \"https://covidtracking.com/api/us/daily\"\n\nexport const useStore = () => {\n  const [data, setData] = React.useState<Object[] | void | null | undefined>([]);// data for graph\n  const [dataDiff, setDataDiff] = React.useState<number[] | any[] | undefined>([]);// data diff for graph\n  const [labels, setLabels] = React.useState<Object[] | void | null | undefined>([]);\n  const headers = new Headers({\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0\"\n  });\n\n\n\n  function countryDataGraph(data: any, country: string, caseType: string, dateTo: string) {\n    let resultCases: any[] = []\n    let resultDates: any[] = []\n    if (data.length > 0) {\n      data.forEach((item: any) => {\n        if ((moment(item.Date).isAfter(dateTo))) {\n          resultCases.push(item.Cases);\n          resultDates.push(moment(item.Date).format('YYYY/MM/DD'));\n        }\n      })\n      let resultCasesDiff: any[] = _.map(resultCases, function (e: any, i: any) {\n        return (resultCases[i + 1] - e) < 0 ? 0 : (resultCases[i + 1] - e)\n      });\n      resultCasesDiff.pop();\n      resultCases.pop();\n      resultDates.pop();\n      setDataDiff(resultCasesDiff);\n      setData(resultCases);\n      setLabels(resultDates);\n    }\n  }\n\n  // const response = await fetch(\"https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.json\", {\n  const getDataCovid = async () => {\n    try {\n      const country: string = 'finland';\n      const caseType: string = 'confirmed';\n      const dateTo: string = `${moment().subtract(3, 'months').format()}`\n      await fetch(`https://api.covid19api.com/country/${country}/status/${caseType}/live?from=${dateTo}&to=${moment().format('YYYY-MM-DDT00:00:00')}`, {\n        method: 'GET',\n        redirect: 'follow',\n        headers: headers\n      })\n        .then((response: any) => response.json()).then((res) => {\n          countryDataGraph(res, country, caseType, dateTo);// cleaning data for ChartJS\n        }).catch(err => alert(err));\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n\n  return {\n    data,\n    dataDiff,\n    labels,\n    headers,\n    getDataCovid,\n  };\n}\nexport const StoreContainer = createContainer(useStore)\n"]},"metadata":{},"sourceType":"module"}